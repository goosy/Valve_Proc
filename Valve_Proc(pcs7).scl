//**************************************************************************************
// Copyright Goosy. All Rights Reserved. Confidential
// If interlocking is involved, it is recommended not to use it in CFC
//**************************************************************************************
FUNCTION_BLOCK "Valve_Proc"
TITLE='电动执行机构 带阀位反馈'
{
    S7_tasklist:='OB100';//Block is called if there is in a warm restart
    S7_m_c:='true';
    S7_alarm_ui:='1'
}
VERSION:'1.2'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:ValvePrc
FAMILY:GooLib
//************************************

CONST
    S7_ZERO := 0;
    S7_SPAN := 27648;
    S7_AI_MIN := -32768;
    S7_AI_MIN_WORD := W#16#8000;
    S7_AI_MAX := 32767;
    S7_AI_MAX_WORD := W#16#7FFF;
    STOP_STATUS := W#16#0;
    CLOSING_STATUS := W#16#1;
    OPENNING_STATUS := W#16#2;
    CLOSE_STATUS := W#16#4;
    OPEN_STATUS := W#16#8;
    MARCH_STATUS :=  W#16#16;
END_CONST

VAR_INPUT
EV_ID {
    S7_visible:='false';//必须小写,因为是字符,带引号
    S7_link:='false';
    S7_param:='false';
    S7_server:='alarm_archiv';
    S7_a_type:='alarm_8p'
}:DWORD:=0;//Message ID
RUNUPCYC{
    S7_visible:='false';
    S7_link:='false'
}:INT:=3;//Number of run up cycles
MSG_LOCK{
    S7_visible:='false';
    S7_link:='false';
    S7_m_c:='true'
}:BOOL:=0;//Enable 1=Message locked

CP{//1-阀门处于全部关闭状态
    S7_shortcut:='全关状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
OP{//1-阀门处于全部打开状态
    S7_shortcut:='全开状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
remote{//0-就地  1-远程
    S7_shortcut:='就地/远程指示';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=1;
error{//0-正常  1-故障
    S7_shortcut:='诊断状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
enable_AH { // 允许AH报警
  S7_shortcut := '允许AH报警';
  S7_m_c := 'true';
  S7_dynamic := 'true'
}:BOOL:=0;
enable_WH { // 允许WH报警
  S7_shortcut := '允许WH报警';
  S7_m_c := 'true';
  S7_dynamic := 'true'
}:BOOL:=0;
enable_WL { // 允许WL报警
  S7_shortcut := '允许WL报警';
  S7_m_c := 'true';
  S7_dynamic := 'true'
}:BOOL:=0;
enable_AL { // 允许AL报警
  S7_shortcut := '允许AL报警';
  S7_m_c := 'true';
  S7_dynamic := 'true'
}:BOOL:=0;

//*****以下为模拟输入
AI{//阀位采集值
    S7_shortcut:='通道值';
    S7_m_c:='true';
    S7_dynamic:='true'
}:WORD:=S7_AI_MIN_WORD;
VP_raw AT AI : INT;
zero_raw{//原始零点
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='原始零点';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=S7_ZERO;
span_raw{//原始量程
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='原始量程';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=S7_SPAN;
overflow_SP{//上溢出设定值
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='上溢出设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=28000;
underflow_SP{//下溢出设定值
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='下溢出设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=-500;
zero{//零点
    S7_shortcut:='零点';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=0.0;
span{//量程
    S7_shortcut:='量程';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=100.0;
invalid_value{//无效设定值
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='无效设定值';
    S7_m_c:='true'
    //S7_archive:='shortterm'
}:REAL:=-1000000.0;
VP_SP{//设定值
    S7_shortcut:='设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=50.0;
AH_limit{//上上限
    S7_link:='false';
    S7_shortcut:='上上限';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=100.0;
WH_limit{//上限
    S7_link:='false';
    S7_shortcut:='上限';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=100.0;
WL_limit{//下限
    S7_link:='false';
    S7_shortcut:='下限';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=0.0;
AL_limit{//下下限
    S7_link:='false';
    S7_shortcut:='下下限';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=0.0;
FT_zone {//执行指定阀位容错值
    S7_link:='false';
    S7_shortcut := '定位容错值';
    S7_m_c := 'true'
}:REAL:=0.5;
FT_time {//容错时间，单位毫秒 赋值0时无容错时间
    S7_link:='false';
    S7_shortcut := '容错时间';
    S7_m_c := 'true'
} :DINT := 0;
ftTime AT FT_time : TIME;
stop_delay {// 停止信号延时 (单位毫秒 不要赋值0)
    S7_link:='false';
    S7_shortcut := '停止信号延时';
    S7_m_c := 'true'
} : DINT := 500;
stopDelay AT stop_delay : TIME;
//******模拟输入结束

END_VAR

VAR_OUTPUT
QMSG_ERR{
    S7_visible:='false';
    S7_dynamic:='true'
}:BOOL:=0;// ALARM_8P:Error output
QMSG_SUP{
    S7_visible:='false';
    S7_dynamic:='true';
    S7_m_c:='true'
}:BOOL:=0;// 1=Message Suppression Active
MSG_STAT{
    S7_visible:='false';
    S7_dynamic:='true'
}:WORD:=0;// 1=Message STATUS Active
MSG_ACK{
    S7_visible:='false';
    S7_dynamic:='true'
}:WORD:=0;// 1=Message ACK_STATE Active

//******线圈输出
close_action{//  1-发出全关命令
    S7_shortcut:='停止命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
open_action{//  1-发出全开命令
    S7_shortcut:='运行命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
stop_action {// 1-停止执行开关阀，只有阀动作自保持时需要
    S7_shortcut:='停止执行';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;
control_action {// 2位单线控制输出
    S7_shortcut:='2位单线控制';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;  //1：开阀 0：关阀

//******状态输出
VP_AH{//上上限报警
    S7_shortcut:='上上限报警';
    S7_m_c:='true';
    S7_dynamic:='true'
}:bool:=0;
VP_WH{//上限警告
    S7_shortcut:='上限警告';
    S7_m_c:='true';
    S7_dynamic:='true'
}:bool:=0;
VP_WL{//下限警告
    S7_shortcut:='下限警告';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
VP_AL{//下下限报警
    S7_shortcut:='下下限报警';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
VP_overflow{//上溢出标志
    S7_shortcut:='上溢出标志';
    S7_m_c:='true';
    S7_dynamic:='true'
}:bool:=0;
VP_underflow{//下溢出标志
    S7_shortcut:='下溢出标志';
    S7_m_c:='true';
    S7_dynamic:='true'
}:bool:=0;
VP_invalid{//阀位值无效
    S7_shortcut:='阀位值无效';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
VP_error{//设置测量错误标志
    S7_shortcut:='测量错误';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
SP_error{//设置错误标志
    S7_shortcut:='错误标志';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
valve_error {//阀体故障，无法操作
    S7_shortcut:='阀体故障';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;
VP{//阀位
    S7_shortcut:='阀位';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=0.0;
//****
END_VAR

VAR_IN_OUT
close_CMD{//  1-发出手动全关命令
    S7_shortcut:='手动全关命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
open_CMD{//  1-发出手动全开命令
    S7_shortcut:='手动全开命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
march_CMD{// 1-动作至指定阀位
    S7_shortcut:='位式/模拟指示';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
stop_CMD{//1-发出手动停止命令
    S7_shortcut:='手动停止命令';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
// Freely assignable auxiliary values of ALARM_8P
AUX_PR01 {S7_visible := 'false'} : ANY;  // Auxiliary value 1
AUX_PR02 {S7_visible := 'false'} : ANY;  // Auxiliary value 2
AUX_PR03 {S7_visible := 'false'} : ANY;  // Auxiliary value 3
AUX_PR04 {S7_visible := 'false'} : ANY;  // Auxiliary value 4
AUX_PR05 {S7_visible := 'false'} : ANY;  // Auxiliary value 5
AUX_PR06 {S7_visible := 'false'} : ANY;  // Auxiliary value 6
AUX_PR07 {S7_visible := 'false'} : ANY;  // Auxiliary value 7
AUX_PR08 {S7_visible := 'false'} : ANY;  // Auxiliary value 8
AUX_PR09 {S7_visible := 'false'} : ANY;  // Auxiliary value 9
AUX_PR10 {S7_visible := 'false'} : ANY;  // Auxiliary value 10
END_VAR

VAR
SbRESTART:BOOL:=TRUE;
siRUNUPCNT:INT:=0;
sb_SIG_1:BOOL:=FALSE;
sb_SIG_2:BOOL:=FALSE;
sb_SIG_3:BOOL:=FALSE;
sb_SIG_4:BOOL:=FALSE;
sb_SIG_5:BOOL:=FALSE;
sb_SIG_6:BOOL:=FALSE;
sb_SIG_7:BOOL:=FALSE;
sb_SIG_8:BOOL:=FALSE;
ALARM_8P_1:ALARM_8P;
// 内部
trigger_AH : BOOL;   // 触发高高报
trigger_WH : BOOL;   // 触发高报
trigger_WL : BOOL;   // 触发低报
trigger_AL : BOOL;   // 触发低低报
mode : WORD; //当前模式
VP_AH_set : TON;
VP_AH_reset : TOF;
VP_WH_set : TON;
VP_WH_reset : TOF;
VP_WL_set : TON;
VP_WL_reset : TOF;
VP_AL_set : TON;
VP_AL_reset : TOF;
stop_TOF : TOF;
END_VAR

VAR_TEMP
// Temporary Variables
deviation:REAL;
tmp_AH : REAL;
tmp_WH : REAL;
tmp_WL : REAL;
tmp_AL : REAL;
ERR:BOOL;//测量错误
OVFL:BOOL;//上溢出
UDFL:BOOL;//下溢出
// COMMON
pbALARM:BOOL;
pbM_SUP:BOOL;
pb_SIG_1,pb_SIG_2,pb_SIG_3,pb_SIG_4,pb_SIG_5,pb_SIG_6,pb_SIG_7,pb_SIG_8:BOOL;
TOP_SI:STRUCT
    EV_CLASS:BYTE;
    EV_NUM:BYTE;
    PRIORITY:BYTE;
    NUM:BYTE;
    TYP2_3:BYTE;
    TYP1:BYTE;
    ZI1:WORD;
    ZI2_3:DWORD;
END_STRUCT;
START_UP_SI:STRUCT
    EV_CLASS:BYTE;
    EV_NUM:BYTE;
    PRIORITY:BYTE;
    NUM:BYTE;
    TYP2_3:BYTE;
    TYP1:BYTE;
    ZI1:WORD;
    ZI2_3:DWORD;
END_STRUCT;
DUMMY:INT;
END_VAR


// Statement Section
DUMMY:=RD_SINFO(TOP_SI:=TOP_SI,START_UP_SI:=START_UP_SI);
pbM_SUP:=MSG_LOCK;
IF sbRESTART THEN
    TOP_SI.NUM:=100;
    sbRESTART:=FALSE;
END_IF;
CASE WORD_TO_INT(BYTE_TO_WORD(TOP_SI.NUM))OF
    100:
    VP:=0.0;deviation:=0.0;SP_error:=0;VP_overflow:=0;VP_underflow:=0;
    VP_AH:=0;VP_WH:=0;VP_WL:=0;VP_AL:=0;
    open_action:=0;close_action:=0;
    QMSG_ERR:=0;
    QMSG_SUP:=0;
    MSG_STAT:=0;
    MSG_ACK:=0;
    pb_SIG_1:=0;
    pb_SIG_2:=0;
    pb_SIG_3:=0;
    pb_SIG_4:=0;
    pb_SIG_5:=0;
    pb_SIG_6:=0;
    pb_SIG_7:=0;
    pb_SIG_8:=0;
    siRUNUPCNT:=RUNUPCYC;
ELSE

    //**********************
    // 阀位反馈
    //**********************

    // 判断输入值的有效性
    IF VP_raw = S7_AI_MIN OR VP_raw = S7_AI_MAX THEN
        // 非测量输入
        ERR := TRUE; // 输出
        OVFL := FALSE;
        UDFL := FALSE;
    ELSIF VP_raw > overflow_SP THEN
        // 高溢出
        ERR := FALSE;
        OVFL := TRUE; // 输出
        UDFL := FALSE;
    ELSIF VP_raw < underflow_SP THEN
        // 低溢出
        ERR := FALSE;
        UDFL := TRUE; // 输出
        OVFL:= FALSE;
    ELSE
        // 正常输入
        ERR := FALSE;
        OVFL := FALSE;
        UDFL := FALSE;
    END_IF;

    // 设定阀位值及其有效性
    VP_error := ERR;
    VP_overflow := OVFL;
    VP_underflow := UDFL;
    VP_invalid := ERR OR OVFL OR UDFL;
    IF VP_invalid THEN
        VP_AH := FALSE;
        VP_WH := FALSE;
        VP_WL := FALSE;
        VP_AL := FALSE;
        VP := invalid_value; // 无效时不计算，直接设为默认无效值
    ELSE
        VP := (VP_raw - zero_raw)
            * (span - zero)
            / (span_raw - zero_raw)
            + zero;
    END_IF;

    // 限制值排序
    IF enable_AH THEN
        tmp_AH := AH_limit;
    ELSE
        tmp_AH := (overflow_SP - zero_raw)
               * (span - zero)
               / (span_raw - zero_raw)
               + zero;
    END_IF;

    IF enable_WH THEN
        tmp_WH := WH_limit;
    ELSE
        tmp_WH := tmp_AH;
    END_IF;

    IF enable_AL THEN
        tmp_AL := AL_limit;
    ELSE
        tmp_AL := (underflow_SP - zero_raw)
               * (span - zero)
               / (span_raw - zero_raw)
               + zero;
    END_IF;

    IF enable_WL THEN
        tmp_WL := WL_limit;
    ELSE
        tmp_WL := tmp_AL;
    END_IF;

    // 参数设置错误或溢出
    SP_error := tmp_WH > tmp_AH OR tmp_WL > tmp_WH OR tmp_AL > tmp_WL;
    //**********************

    //**********************
    // 报警处理
    //**********************
    IF SP_error OR VP_invalid THEN
            trigger_AH := false;
            trigger_WH := false;
            trigger_WL := false;
            trigger_AL := false;
    ELSE
        // 上上限报警
        IF enable_AH AND (VP > AH_limit) THEN
            trigger_AH := TRUE;
            trigger_WL := FALSE;
            trigger_WL := FALSE;
            trigger_AL := FALSE;
        END_IF;
        // 上上限报警恢复
        IF NOT enable_AH OR VP < (AH_limit - FT_zone) THEN
            trigger_AH := FALSE;
        END_IF;

        // 上限报警
        IF NOT trigger_AH AND enable_WH AND (VP > WH_limit) THEN
            trigger_WH := TRUE;
            trigger_WL := FALSE;
            trigger_AL := FALSE;
        END_IF;
        // 上限报警恢复
        IF NOT enable_WH OR VP < (WH_limit - FT_zone) THEN
            trigger_WH := FALSE;
        END_IF;

        // 下下限报警
        IF enable_AL AND (VP < AL_limit) THEN
            trigger_AL := TRUE;
            trigger_WL := FALSE;
            trigger_WH := FALSE;
            trigger_AH := FALSE;
        END_IF;
        // 下下限报警恢复
        IF NOT enable_AL OR VP > (AL_limit + FT_zone) THEN
            trigger_AL := FALSE;
        END_IF;

        // 下限报警
        IF NOT trigger_AL AND enable_WL AND (VP < WL_limit) THEN
            trigger_WL := TRUE;
            trigger_WH := FALSE;
            trigger_AH := FALSE;
        END_IF;
        // 下限报警恢复
        IF NOT enable_WL OR VP > (WL_limit + FT_zone) THEN
            trigger_WL := FALSE;
        END_IF;
    END_IF;

    // 容错时限后输出报警标志
    IF ftTime = T#0ms THEN
        VP_AH := trigger_AH;
        VP_WH := trigger_WH;
        VP_WL := trigger_WL;
        VP_AL := trigger_AL;
    ELSE
        // 延时置位高高报
        VP_AH_set(
            IN := trigger_AH,
            PT := ftTime);
        IF VP_AH_set.Q THEN
            VP_AH := TRUE;
        END_IF;

        // 延时复位高高报
        VP_AH_reset(
            IN := trigger_AH,
            PT := ftTime);
        IF NOT VP_AH_reset.Q THEN
            VP_AH := FALSE;
        END_IF;

        // 延时置位高报
        VP_WH_set(
            IN := trigger_WH,
            PT := ftTime);
        IF VP_WH_set.Q THEN
            VP_WH := TRUE;
        END_IF;

        // 延时复位高报
        VP_WH_reset(
            IN := trigger_WH,
            PT := ftTime);
        IF NOT VP_WH_reset.Q THEN
            VP_WH := FALSE;
        END_IF;

        // 延时置位低报
        VP_WL_set(
            IN := trigger_WL,
            PT := ftTime);
        IF VP_WL_set.Q THEN
            VP_WL := TRUE;
        END_IF;

        // 延时复位低报
        VP_WL_reset(
            IN := trigger_WL,
            PT := ftTime);
        IF NOT VP_WL_reset.Q THEN
            VP_WL := FALSE;
        END_IF;

        // 延时置位低低报
        VP_AL_set(
            IN := trigger_AL,
            PT := ftTime);
        IF VP_AL_set.Q THEN
            VP_AL := TRUE;
        END_IF;

        // 延时复位低低报
        VP_AL_reset(
            IN := trigger_AL,
            PT := ftTime);
        IF NOT VP_AL_reset.Q THEN
            VP_AL := FALSE;
        END_IF;

    END_IF;
    //**********************

    //**********************
    // 阀动作处理
    //**********************

    // 为停止输出延时信号
    stop_TOF(
        IN := stop_CMD,
        PT := stopDelay);
    stop_action := stop_TOF.Q;

    // 输出复位，停止优先
    valve_error := error OR (CP AND OP); //阀故障
    IF stop_CMD OR NOT remote OR valve_error THEN // stop first
        close_CMD := FALSE;
        open_CMD := FALSE;
        march_CMD := FALSE;
        stop_CMD := FALSE;
        IF mode = OPENNING_STATUS OR mode = CLOSING_STATUS or mode = MARCH_STATUS THEN
            mode := STOP_STATUS;
        END_IF;
    END_IF;
    IF mode = STOP_STATUS THEN
        open_action := FALSE;
        close_action := FALSE;
    END_IF;

    // 全开状态的判定和动作
    IF OP AND mode <> CLOSING_STATUS AND mode <> MARCH_STATUS THEN
        mode := STOP_STATUS;
    END_IF;
    IF mode = OPEN_STATUS THEN
        open_CMD := FALSE;
        close_action := FALSE;
        open_action := FALSE;
        control_action := TRUE;
    END_IF;

    // 全关状态的判定和动作
    IF CP AND mode <> OPENNING_STATUS AND mode <> MARCH_STATUS THEN
        mode := CLOSE_STATUS;
    END_IF;
    IF mode = CLOSE_STATUS THEN
        close_CMD := FALSE;
        open_action := FALSE;
        close_action := FALSE;
        control_action := FALSE;
    END_IF;

    // 开阀
    IF open_CMD AND mode <> OPENNING_STATUS THEN
        close_CMD := FALSE;
        open_CMD := FALSE;
        march_CMD := FALSE;
        mode := OPENNING_STATUS;
    END_IF;
    IF mode = OPENNING_STATUS THEN
        close_action := FALSE;
        open_action := TRUE;
        control_action := TRUE;
    END_IF;

    // 关阀
    IF close_CMD AND mode <> CLOSING_STATUS THEN
        close_CMD := FALSE;
        open_CMD := FALSE;
        march_CMD := FALSE;
        mode := CLOSING_STATUS;
    END_IF;
    IF mode = CLOSING_STATUS THEN
        close_action := TRUE;
        open_action := FALSE;
        control_action := FALSE;
    END_IF;

    // 指定阀位控制
    IF VP_invalid THEN // 阀位无效时关闭指定阀位命令
        march_CMD := FALSE;
        IF mode = MARCH_STATUS THEN
            mode := STOP_STATUS;
        END_IF;
    END_IF;
    IF march_CMD AND mode <> MARCH_STATUS THEN
        close_CMD := FALSE;
        open_CMD := FALSE;
        march_CMD := FALSE;
        mode := MARCH_STATUS;
    END_IF;
    IF mode = MARCH_STATUS THEN
        IF VP > VP_SP + FT_zone THEN //当设定值容错区低于阀位，关阀动作
            close_action := TRUE;
            open_action := FALSE;
        ELSIF VP < VP_SP - FT_zone THEN //当设定值容错区高于阀位，开阀动作
            close_action := FALSE;
            open_action := TRUE;
        ELSE //当设定值在阀位容错区内，停止动阀，复位定位命令
            close_action := FALSE;
            open_action := FALSE;
            march_CMD := FALSE;
            // 用stop_CMD启动 stop_action 和 STOP_STATUS
            stop_CMD := TRUE;
        END_IF;
    END_IF;
    //**********************

    // 通用处理
    IF siRUNUPCNT=0 THEN
        IF MSG_LOCK THEN
            pb_SIG_1:=0;
        ELSE
            pb_SIG_1:=error;
        END_IF;
        pbALARM:=sb_SIG_1<>pb_SIG_1;
    ELSE
        siRUNUPCNT:=siRUNUPCNT-1;
        pbALARM:=false;
        pbM_SUP:=true;
    END_IF;
END_CASE;

//****************
//Message with ALARM_8P
//*******************
IF pbALARM THEN
    ALARM_8P_1
    (EN_R:=TRUE,
    ID:=16#EEEE,
    EV_ID:=EV_ID,
    SIG_1:=pb_SIG_1,
    SIG_2:=0,
    SIG_3:=0,
    SIG_4:=0,
    SIG_5:=0,
    SIG_6:=0,
    SIG_7:=0,
    SIG_8:=0,
    SD_1:=AUX_PR01,
    SD_2:=AUX_PR02,
    SD_3:=AUX_PR03,
    SD_4:=AUX_PR04,
    SD_5:=AUX_PR05,
    SD_6:=AUX_PR06,
    SD_7:=AUX_PR07,
    SD_8:=AUX_PR08,
    SD_9:=AUX_PR09,
    SD_10:=AUX_PR10);
    QMSG_ERR:=ALARM_8P_1.ERROR;
    MSG_STAT:=ALARM_8P_1.STATUS;
    MSG_ACK:=ALARM_8P_1.ACK_STATE;
END_IF;
IF (NOT QMSG_ERR)THEN
    sb_SIG_1:=pb_SIG_1;
END_IF;
IF (MSG_STAT=21)THEN
    pbM_SUP:=TRUE;
END_IF;
QMSG_SUP:=pbM_SUP;

END_FUNCTION_BLOCK
