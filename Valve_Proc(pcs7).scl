//**************************************************************************************
// Copyright Goosy. All Rights Reserved. Confidential
// If interlocking is involved, it is recommended not to use it in CFC
//**************************************************************************************
FUNCTION_BLOCK "Valve_Proc"
TITLE='电动执行机构，可选阀位反馈'
{
    S7_tasklist:='OB100';//Block is called if there is in a warm restart
    S7_m_c:='true';
    S7_alarm_ui:='1'
}
VERSION:'1.3'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:ValvePrc
FAMILY:GooLib
//************************************

CONST
    S7_ZERO := 0;
    S7_SPAN := 27648;
    S7_AI_MIN := -32768;
    S7_AI_MIN_WORD := W#16#8000;
    S7_AI_MAX := 32767;
    S7_AI_MAX_WORD := W#16#7FFF;
    STOP_STATUS := W#16#0;
    CLOSE_STATUS := W#16#1;
    OPEN_STATUS := W#16#2;
    STOPPING_STATUS := W#16#4;
    CLOSING_STATUS := W#16#8;
    OPENNING_STATUS := W#16#10;
    POSITION_STATUS := W#16#20;
    ZERO := 0.0;
    SPAN := 100.0;
    INVALID_VALUE := -100.0;
END_CONST

VAR_INPUT
EV_ID {
    S7_visible:='false';//必须小写,因为是字符,带引号
    S7_link:='false';
    S7_param:='false';
    S7_server:='alarm_archiv';
    S7_a_type:='alarm_8p'
}:DWORD:=0;//Message ID
RUNUPCYC{
    S7_visible:='false';
    S7_link:='false'
}:INT:=3;//Number of run up cycles
MSG_LOCK{
    S7_visible:='false';
    S7_link:='false';
    S7_m_c:='true'
}:BOOL:=0;//Enable 1=Message locked

CP{//1-阀门处于全部关闭状态
    S7_shortcut:='全关状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
OP{//1-阀门处于全部打开状态
    S7_shortcut:='全开状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
remote{//0-就地  1-远程
    S7_shortcut:='就地/远程指示';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=1;
error{//0-正常  1-故障
    S7_shortcut:='诊断状态';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;

//*****以下为模拟输入
AI{//阀位采集值
    S7_shortcut:='通道值';
    S7_m_c:='true';
    S7_dynamic:='true'
}:WORD:=S7_AI_MIN_WORD;
VP_raw AT AI : INT;
zero_raw{//原始零点
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='原始零点';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=S7_ZERO;
span_raw{//原始量程
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='原始量程';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=S7_SPAN;
overflow_SP{//上溢出设定值
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='上溢出设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=28000;
underflow_SP{//下溢出设定值
    S7_visible:='false';
    S7_link:='false';
    S7_shortcut:='下溢出设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:INT:=-500;
VP_SP{//设定值
    S7_shortcut:='设定值';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=50.0;
FT_zone {//执行指定阀位容错值
    S7_link:='false';
    S7_shortcut := '定位容错值';
    S7_m_c := 'true'
}:REAL:=0.5;
action_time {// 动作时间，完成阀动作的最长时间，无阀位时在该时间后判断是否离线 (单位毫秒)
    S7_link:='false';
    S7_shortcut := '容错时间';
    S7_m_c := 'true'
} :DINT := 100000;
action_DR AT action_time : TIME;
signal_time {// 信号时间，停止等信号要保持持续的最短时间，有阀位时在该时间后判断阀是否离线 (单位毫秒 阀位有效时)
    S7_link:='false';
    S7_shortcut := '停止信号延时';
    S7_m_c := 'true'
} : DINT := 500;
signal_DR AT signal_time : TIME;
//******模拟输入结束

END_VAR

VAR_OUTPUT
QMSG_ERR{
    S7_visible:='false';
    S7_dynamic:='true'
}:BOOL:=0;// ALARM_8P:Error output
QMSG_SUP{
    S7_visible:='false';
    S7_dynamic:='true';
    S7_m_c:='true'
}:BOOL:=0;// 1=Message Suppression Active
MSG_STAT{
    S7_visible:='false';
    S7_dynamic:='true'
}:WORD:=0;// 1=Message STATUS Active
MSG_ACK{
    S7_visible:='false';
    S7_dynamic:='true'
}:WORD:=0;// 1=Message ACK_STATE Active

//******线圈输出
close_action{//  1-发出全关命令
    S7_shortcut:='停止命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
open_action{//  1-发出全开命令
    S7_shortcut:='运行命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
stop_action {// 1-停止执行开关阀，只有阀动作自保持时需要
    S7_shortcut:='停止执行';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;
control_action {// 2位单线控制输出
    S7_shortcut:='2位单线控制';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;  //1：开阀 0：关阀

//******状态输出
valve_error {  //阀体故障，无法操作
    S7_shortcut:='阀体故障';
    S7_m_c := 'true';
    S7_dynamic:='true'
}:BOOL:=0;
VP_error{  // 阀位值无效，断路、短路、溢出
    S7_shortcut:='测量错误';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
action_success{  // 阀动作成功，当 action_success action_error 都不为 true 时，表示不能判断
    S7_shortcut:='执行成功';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
action_error{  // 执行错误，即开、关、停在指定时间后无反馈
    S7_shortcut:='执行失败';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
action{  // 阀动作执行中
    S7_shortcut:='执行中';
    S7_m_c:='true';
    S7_dynamic:='true'
}: BOOL;
VP{  //阀位
    S7_shortcut:='阀位';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:REAL:=0.0;
//****
END_VAR

VAR_IN_OUT
close_CMD{// 发出全关命令
    S7_shortcut:='手动全关命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
open_CMD{//  发出全开命令
    S7_shortcut:='手动全开命令';
    S7_m_c:='true';
    S7_dynamic:='true'
    //S7_archive:='shortterm'
}:BOOL:=0;
position_CMD{// 发出定位命令
    S7_shortcut:='位式/模拟指示';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
stop_CMD{// 发出停止命令
    S7_shortcut:='手动停止命令';
    S7_m_c:='true';
    S7_dynamic:='true'
}:BOOL:=0;
// Freely assignable auxiliary values of ALARM_8P
AUX_PR01 {S7_visible := 'false'} : ANY;  // Auxiliary value 1
AUX_PR02 {S7_visible := 'false'} : ANY;  // Auxiliary value 2
AUX_PR03 {S7_visible := 'false'} : ANY;  // Auxiliary value 3
AUX_PR04 {S7_visible := 'false'} : ANY;  // Auxiliary value 4
AUX_PR05 {S7_visible := 'false'} : ANY;  // Auxiliary value 5
AUX_PR06 {S7_visible := 'false'} : ANY;  // Auxiliary value 6
AUX_PR07 {S7_visible := 'false'} : ANY;  // Auxiliary value 7
AUX_PR08 {S7_visible := 'false'} : ANY;  // Auxiliary value 8
AUX_PR09 {S7_visible := 'false'} : ANY;  // Auxiliary value 9
AUX_PR10 {S7_visible := 'false'} : ANY;  // Auxiliary value 10
END_VAR

VAR
sbRESTART:BOOL:=TRUE;
siRUNUPCNT:INT:=0;
sb_SIG_1:BOOL:=FALSE;
sb_SIG_2:BOOL:=FALSE;
sb_SIG_3:BOOL:=FALSE;
sb_SIG_4:BOOL:=FALSE;
sb_SIG_5:BOOL:=FALSE;
sb_SIG_6:BOOL:=FALSE;
sb_SIG_7:BOOL:=FALSE;
sb_SIG_8:BOOL:=FALSE;
ALARM_8P_1:ALARM_8P;
// 内部
executable      : BOOL; // 可执行
action_trigger  : BOOL; // 阀动作触发
signal          : BOOL; // 阀信号中
mode            : WORD; // 当前模式
last_mode       : WORD; // 上一循环时的模式
last_VP         : REAL; // 上一次阀位
signal_TOF : TOF;
action_TOF : TOF;
END_VAR

VAR_TEMP
ERR : BOOL;                 // 测量错误
// COMMON
pbALARM:BOOL;
pbM_SUP:BOOL;
pb_SIG_1,pb_SIG_2,pb_SIG_3,pb_SIG_4,pb_SIG_5,pb_SIG_6,pb_SIG_7,pb_SIG_8:BOOL;
TOP_SI:STRUCT
    EV_CLASS:BYTE;
    EV_NUM:BYTE;
    PRIORITY:BYTE;
    NUM:BYTE;
    TYP2_3:BYTE;
    TYP1:BYTE;
    ZI1:WORD;
    ZI2_3:DWORD;
END_STRUCT;
START_UP_SI:STRUCT
    EV_CLASS:BYTE;
    EV_NUM:BYTE;
    PRIORITY:BYTE;
    NUM:BYTE;
    TYP2_3:BYTE;
    TYP1:BYTE;
    ZI1:WORD;
    ZI2_3:DWORD;
END_STRUCT;
DUMMY:INT;
END_VAR

BEGIN
DUMMY:=RD_SINFO(TOP_SI:=TOP_SI,START_UP_SI:=START_UP_SI);
pbM_SUP:=MSG_LOCK;
IF sbRESTART THEN
    TOP_SI.NUM:=100;
    sbRESTART:=FALSE;
END_IF;
CASE WORD_TO_INT(BYTE_TO_WORD(TOP_SI.NUM))OF
    100:
    VP:=0.0;action_error:=0;
    open_action:=0;close_action:=0;
    QMSG_ERR:=0;
    QMSG_SUP:=0;
    MSG_STAT:=0;
    MSG_ACK:=0;
    pb_SIG_1:=0;
    pb_SIG_2:=0;
    pb_SIG_3:=0;
    pb_SIG_4:=0;
    pb_SIG_5:=0;
    pb_SIG_6:=0;
    pb_SIG_7:=0;
    pb_SIG_8:=0;
    siRUNUPCNT:=RUNUPCYC;
ELSE

//**********************
// 阀位反馈
//**********************

// 判断输入值的有效性
IF VP_raw = S7_AI_MIN OR VP_raw = S7_AI_MAX THEN
    // 非测量输入
    ERR := TRUE;
ELSIF VP_raw > overflow_SP OR VP_raw < underflow_SP THEN
    // 溢出
    ERR := TRUE;
ELSE
    // 正常输入
    ERR := FALSE;
END_IF;

// 设定阀位值及其有效性
VP_error := ERR;
IF ERR THEN
    VP := INVALID_VALUE; // 无效时不计算
ELSE
    VP := (VP_raw - zero_raw)
        * (SPAN - ZERO)
        / (span_raw - zero_raw)
        + ZERO;
END_IF;

//**********************
// 阀动作处理
//**********************

// 准备动作变量
valve_error := error OR (CP AND OP); //阀故障
executable := remote AND NOT valve_error; // 可执行
action := mode = STOPPING_STATUS OR mode = OPENNING_STATUS OR mode = CLOSING_STATUS OR mode = POSITION_STATUS;
IF NOT executable THEN
    // 切换至停止状态
    // 开到位和关到位情况会在后继代码中做修正，无须在此切换
    IF action THEN
        mode := STOP_STATUS;
    END_IF;
    // 输出线圈会在后继代码中复位
    signal := FALSE;
    action := FALSE;
    action_success := FALSE;
    action_error := FALSE;
    close_CMD := FALSE;
    open_CMD := FALSE;
    position_CMD := FALSE;
    stop_CMD := FALSE;
    // 重置动作计时
    signal_TOF.STATE := B#16#0;
    action_TOF.STATE := B#16#0;
END_IF;
// action 上升沿
action_trigger := last_mode <> mode AND action; // action 已隐含 executable
last_mode := mode;
IF action_trigger THEN // 重置离线错误，记录动作前的阀位
    action_success := FALSE;
    action_error := FALSE;
    IF NOT VP_error THEN
        last_VP := VP;
    END_IF;
END_IF;

// 动作计时
signal_TOF(
    IN := action_trigger,
    PT := signal_DR);
action_TOF(
    IN := action_trigger,
    PT := action_DR);

// 停止命令优先
IF stop_CMD THEN
    IF mode = STOPPING_STATUS THEN
        mode := STOP_STATUS; // 确保停止状态可以继续响应 stop_CMD
    ELSE
        mode := STOPPING_STATUS;
        stop_CMD := FALSE;
    END_IF;
    close_CMD := FALSE;
    open_CMD := FALSE;
    position_CMD := FALSE;
END_IF;

// 停阀动作
IF mode = STOPPING_STATUS THEN
    open_action := FALSE;
    close_action := FALSE;
    stop_action := TRUE;
END_IF;
// 复位动作
IF mode = STOP_STATUS THEN
    open_action := FALSE;
    close_action := FALSE;
    stop_action := FALSE;
END_IF;

// 全开状态的判定和动作
IF OP AND mode <> CLOSING_STATUS AND mode <> POSITION_STATUS THEN
    IF mode = OPENNING_STATUS THEN
        action_success := TRUE;
    END_IF;
    mode := OPEN_STATUS;
END_IF;
// 复位动作
IF mode = OPEN_STATUS THEN
    open_CMD := FALSE;
    close_action := FALSE;
    open_action := FALSE;
    control_action := TRUE;
    stop_action := FALSE;
END_IF;

// 全关状态的判定
IF CP AND mode <> OPENNING_STATUS AND mode <> POSITION_STATUS THEN
    IF mode = CLOSING_STATUS THEN
        action_success := TRUE;
    END_IF;
    mode := CLOSE_STATUS;
END_IF;
// 复位动作
IF mode = CLOSE_STATUS THEN
    close_CMD := FALSE;
    open_action := FALSE;
    close_action := FALSE;
    control_action := FALSE;
    stop_action := FALSE;
END_IF;

// 开阀
IF open_CMD THEN
    IF mode = OPENNING_STATUS THEN
        mode := STOP_STATUS; // 确保 OPENNING_STATUS 可以继续响应 open_CMD
    ELSE
        mode := OPENNING_STATUS;
        open_CMD := FALSE;
    END_IF;
    close_CMD := FALSE;
    position_CMD := FALSE;
END_IF;
// 动作
IF mode = OPENNING_STATUS THEN
    close_action := FALSE;
    open_action := TRUE;
    control_action := TRUE;
    stop_action := FALSE;
END_IF;

// 关阀
IF close_CMD THEN
    IF mode = CLOSING_STATUS THEN
        mode := STOP_STATUS; // 确保 CLOSING_STATUS 可以继续响应 close_CMD
    ELSE
        mode := CLOSING_STATUS;
        close_CMD := FALSE;
    END_IF;
    open_CMD := FALSE;
    position_CMD := FALSE;
END_IF;
// 动作
IF mode = CLOSING_STATUS THEN
    close_action := TRUE;
    open_action := FALSE;
    control_action := FALSE;
    stop_action := FALSE;
END_IF;

// 指定阀位控制
IF VP_error THEN // 阀位无效时关闭指定阀位命令
    position_CMD := FALSE;
    IF mode = POSITION_STATUS THEN
        action_error := TRUE;
        mode := STOPPING_STATUS;
    END_IF;
END_IF;
IF position_CMD THEN
    IF mode = POSITION_STATUS THEN
        mode := STOP_STATUS; // 确保 POSITION_STATUS 可以继续响应 position_CMD
    ELSE
        mode := POSITION_STATUS;
        position_CMD := FALSE;
    END_IF;
END_IF;
// 动作
IF mode = POSITION_STATUS THEN
    IF VP > VP_SP + FT_zone THEN //当设定值容错区低于阀位，关阀动作
        close_action := TRUE;
        open_action := FALSE;
        stop_action := FALSE;
    ELSIF VP < VP_SP - FT_zone THEN //当设定值容错区高于阀位，开阀动作
        close_action := FALSE;
        open_action := TRUE;
        stop_action := FALSE;
    ELSE //当设定值在阀位容错区内，停止动阀，复位定位命令
        close_action := FALSE;
        open_action := FALSE;
        position_CMD := FALSE;
        action_success := TRUE;
        mode := STOPPING_STATUS;
    END_IF;
END_IF;

// 根据有无阀位，取不同的动作无响应时间

// 信号结束时判断执行结果
// signal 已隐含 executable
IF NOT signal_TOF.Q AND signal THEN
    IF mode = STOPPING_STATUS AND NOT VP_error THEN // 有阀位，判断停止动作结果
        action_success := VP < last_VP + FT_zone AND VP > last_VP - FT_zone;
        action_error := NOT action_success;
    ELSIF mode = STOPPING_STATUS THEN // 无阀位，停止动作无法判断，直接切换状态
        mode := STOP_STATUS;
        action_TOF.STATE := B#16#0;
    ELSIF action AND NOT VP_error THEN // 其它3个动作在信号结束时只能有阀位时判断失败情况
        IF mode = CLOSING_STATUS THEN // 关动作判断是否失败
            action_error := VP > last_VP - FT_zone;
        ELSIF mode = OPENNING_STATUS THEN // 开动作判断是否失败
            action_error := VP < last_VP + FT_zone;
        ELSIF mode = POSITION_STATUS THEN // 定位动作判断是否失败
            // 这里无需考虑目标阀位对动作的影响，因为进入目标阀位后必定不在 POSITION_STATUS 状态下。
            action_error := (VP < last_VP + FT_zone) AND (VP > last_VP - FT_zone);
        END_IF;
    END_IF;
END_IF;
signal := signal_TOF.Q;

// 提前结束无须本次检查
IF action_success THEN
    action_error := FALSE;
END_IF;
IF (action_error OR action_success) AND action THEN
    mode := STOP_STATUS;
    action := FALSE; // 用于屏蔽下方超时检查
    action_TOF.STATE := B#16#0;
END_IF;
// 动作超时判断执行情况(即动作未能提前结束)
IF NOT action_TOF.Q AND action THEN
    // 隐含 NOT action_error AND NOT action_success
    IF mode = STOPPING_STATUS THEN
        // 无阀位时，STOPPING_STATUS 才会延伸到这里
        // 不作检查，仅仅切换至已停状态
        mode := STOP_STATUS;
    ELSE
        // 其余 CLOSING_STATUS OPENNING_STATUS POSITION_STATUS 3种状态
        // 这3种状态能延伸到这里，一定因为动作失败
        action_success := FALSE;
        action_error := TRUE;
        mode := STOP_STATUS;
    END_IF;
END_IF;

//**********************
// 阀逻辑结束
//**********************

    // 通用处理
    IF siRUNUPCNT=0 THEN
        IF MSG_LOCK THEN
            pb_SIG_1:=0;
        ELSE
            pb_SIG_1:=error;
        END_IF;
        pbALARM:=sb_SIG_1<>pb_SIG_1;
    ELSE
        siRUNUPCNT:=siRUNUPCNT-1;
        pbALARM:=false;
        pbM_SUP:=true;
    END_IF;
END_CASE;

//****************
//Message with ALARM_8P
//*******************
IF pbALARM THEN
    ALARM_8P_1(
        EN_R:=TRUE,
        ID:=16#EEEE,
        EV_ID:=EV_ID,
        SIG_1:=pb_SIG_1,
        SIG_2:=0,
        SIG_3:=0,
        SIG_4:=0,
        SIG_5:=0,
        SIG_6:=0,
        SIG_7:=0,
        SIG_8:=0,
        SD_1:=AUX_PR01,
        SD_2:=AUX_PR02,
        SD_3:=AUX_PR03,
        SD_4:=AUX_PR04,
        SD_5:=AUX_PR05,
        SD_6:=AUX_PR06,
        SD_7:=AUX_PR07,
        SD_8:=AUX_PR08,
        SD_9:=AUX_PR09,
        SD_10:=AUX_PR10);
    QMSG_ERR:=ALARM_8P_1.ERROR;
    MSG_STAT:=ALARM_8P_1.STATUS;
    MSG_ACK:=ALARM_8P_1.ACK_STATE;
END_IF;
IF (NOT QMSG_ERR)THEN
    sb_SIG_1:=pb_SIG_1;
END_IF;
IF (MSG_STAT=21)THEN
    pbM_SUP:=TRUE;
END_IF;
QMSG_SUP:=pbM_SUP;

END_FUNCTION_BLOCK
